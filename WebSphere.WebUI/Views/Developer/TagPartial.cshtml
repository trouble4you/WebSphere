@model WebSphere.Domain.Entities.TagProps

@*<script src="~/Scripts/configurator1.js"></script>*@

@{
    var tt = Model;
}
@if (ViewBag.Notification != null)
{
    if (ViewBag.Notification == 1)
    {
        <div class="alert alert-success">Данные успешно сохранены</div>
    }
    else
    {
        <div class="alert alert-error">Введенные данные некорректны </div>
    }
}

     @{var item = ViewBag.TagProps;}

        <div class="tabs"> 
@using (Ajax.BeginForm("EditTagProps", null, new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "tagInfo", OnFailure = "OnFailure", OnSuccess = "reloadTabs" }, new { @id = "TagPropsTab" }))
{
        <div class="tab-content tabConfigurator">
            <div class="tab-pane active" id="commonPropTab">
                @Html.ValidationSummary(true)
                <fieldset>
                    @Html.HiddenFor(m => m.Id)
                    @Html.HiddenFor(m => m.Name)
                    @Html.HiddenFor(m => m.special, new { @class = "ignoreValid", @id = "specialInput" })
                    <div class="DefaultProps">
                        @Html.LabelFor(m => m.Id, "ID")
                        <br />
                        @Html.TextBoxFor(m => m.Id, new { disabled = "disabled", @readonly = "readonly" })
                        <br />
                    </div>

                        @{
                          List<string> commonProps = new List<string> {"Opc","Connection","RealType","Register","AccessType","InMin", "InMax", "OutMin", "OutMax",
                                            "Alarm_IsPermit","HiHiText","HiText","NormalText","LoText", "LoLoText", "HiHiSeverity", "HiSeverity","LoSeverity", "LoLoSeverity",
                                            "History_IsPermit", "RegPeriod", "Deadbend"};
                          ViewBag.ForPartial = commonProps;
                        }

                        @*//}*@
                        @Html.Partial("TagCommonTabPartial", Model)

                        @if (ViewBag.UserProps != null)
{
    foreach (var prop in ViewBag.UserProps)
    {
        var propValue = prop.Value;
        string propKey = prop.Key;

        var typeNameIndex = propKey.LastIndexOf("_");
        var typeName = propKey.Substring(typeNameIndex + 1);
        int typeProp = 0;

        switch (typeName)
        {
            case "byte":
                typeProp = 1;
                break;
            case "word":
                typeProp = 2;
                break;
            case "dword":
                typeProp = 3;
                break;
            case "shortInt":
                typeProp = 4;
                break;
            case "smallInt":
                typeProp = 5;
                break;
            case "longInt":
                typeProp = 6;
                break;
            case "float":
                typeProp = 7;
                break;
            case "double":
                typeProp = 8;
                break;
            case "bool":
                typeProp = 9;
                break;
            case "string":
                typeProp = 10;
                break;
        }
        string propForDelete = "";
        switch (typeName)
        {
            case "string":
                propForDelete = "\"" + propKey + "\":\"" + propValue + "\"";
                break;
            case "float":
                propForDelete = "\"" + propKey + "\":" + (propValue.ToString()).Replace(",", ".");
                break;
            case "double":
                propForDelete = "\"" + propKey + "\":" + (propValue.ToString()).Replace(",", ".");
                break;
            case "bool":
                propForDelete = "\"" + propKey + "\":" + propValue.ToString().ToLower();
                break;
            default:
                propForDelete = "\"" + propKey + "\":" + propValue;
                break;

        }
        if (typeName == "bool")
        {
            <div class="userProp">
                <label>@prop.Key </label>
                <br />
                @Html.CheckBox(propForDelete, false, new { @class = "deleteProp" })
                @{
            var boolVal = Convert.ToString(prop.Value);   
                }
                <input type="text" name="@prop.Key" data-type=@typeProp value=@boolVal.ToLower() data-description="userProp" />
                <br />
            </div>
        }
        else
        {
            <div class="userProp">

                <label>@prop.Key </label>
                <br />
                @Html.CheckBox(propForDelete, false, new { @class = "deleteProp" })
                <input type="text" name="@prop.Key" data-type=@typeProp value="@Convert.ToString(prop.Value)" data-description="userProp" />
                <br />
            </div>
        }

    }
}

</fieldset>
            </div>
            @*<div  class="tab-pane" id="signalsTab">
                    @Html.ValidationSummary(true)
                    <fieldset>
                        @Html.HiddenFor(m => m.Id)
                        @{
                    List<string> signalsProps = new List<string>{"Opc","Connection","RealType","Register","AccessType"};
                    ViewBag.ForPartial = signalsProps;
                        }
                        @Html.Partial("TagCommonTabPartial", Model)

                    </fieldset>
            </div>
            <div class="tab-pane" id="rankTab">
                    @Html.ValidationSummary(true)
                    <fieldset>
                        @Html.HiddenFor(m => m.Id)
                        @{
                        List<string> rankProps = new List<string> { "InMin", "InMax", "OutMin", "OutMax"};
                        ViewBag.ForPartial = rankProps;
                        }
                        @Html.Partial("TagCommonTabPartial", Model)
                    </fieldset>
            </div>
                @if (ViewBag.ActiveModules != null)
            {
                foreach (var item3 in ViewBag.ActiveModules)
                {
                    if (item3.idModule == 2)
                    {
                        <div class="tab-pane" id="AlarmTab">
                                @Html.ValidationSummary(true)
                                <fieldset>
                                    @Html.HiddenFor(m => m.Id)

                                    @{
                                      List<string> alarmProps = new List<string>{"Alarm_IsPermit","HiHiText","HiText",
                                          "NormalText","LoText", "LoLoText", "HiHiSeverity", "HiSeverity","LoSeverity","LoLoSeverity"};
                                      ViewBag.ForPartial = alarmProps;
                                    }
                                    @Html.Partial("TagCommonTabPartial", Model)
                                </fieldset>
                        </div>

                    }
                    if (item3.idModule == 3)
                    {
                        <div class="tab-pane" id="HistoryTab">
                                @Html.ValidationSummary(true)
                                <fieldset>

                                    @{
                                      List<string> historyProps = new List<string> { "History_IsPermit", "RegPeriod", "Deadbend" };
                                      ViewBag.ForPartial = historyProps;
                                    }
                                    @Html.Partial("TagCommonTabPartial", Model)
                                </fieldset>
                        </div>

                    }
                }
            }*@
            <br />
            <input id="saveObjPropsBtn" type="submit" class="btn btn-success" value="Сохранить" />
            <input id="addObjPropsBtn" type="button" class="btn btn-info" value="Добавить свойство" />
            <input id="deleteObjPropsBtn" type="button" class="btn btn-info" value="Удалить свойства" style="display: none;" />
        </div>

}


    </div> 
<link href="~/Content/Configurator.css" rel="stylesheet" />

<script type="text/javascript">
    function showSignalsTab(nodeName) {
        $("#commonPropTab div").hide();
        var signalsArr = ["Opc", "Connection", "RealType", "Register", "AccessType"];
        for (var prop in signalsArr) {
            $('#' + signalsArr[prop]).show();
        }
    }
    function showRankTab(nodeName) {
        $("#commonPropTab div").hide();
        var rankArr = ["InMin", "InMax", "OutMin", "OutMax"];
        for (var prop in rankArr) {
            $('#' + rankArr[prop]).show();
        }
    }
    $(document).ready(function () {
        getAdditionalProps();
        LoadPageOff();
    });


</script>